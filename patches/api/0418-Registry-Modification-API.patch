From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sat, 25 Feb 2023 13:45:44 -0800
Subject: [PATCH] Registry Modification API


diff --git a/src/main/java/io/papermc/paper/chat/ChatType.java b/src/main/java/io/papermc/paper/chat/ChatType.java
new file mode 100644
index 0000000000000000000000000000000000000000..23c333fead562d778f578c3ef6d9dcf3fd113277
--- /dev/null
+++ b/src/main/java/io/papermc/paper/chat/ChatType.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.chat;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface ChatType extends net.kyori.adventure.chat.ChatType, Keyed {
+
+    String textTranslationKey();
+
+    @ApiStatus.NonExtendable
+    @ApiStatus.Experimental
+    interface Builder extends RegistryBuilder<ChatType>, ChatType {
+
+        @NotNull Builder textTranslationKey(@NotNull String key);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrap.java b/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrap.java
index ea84b11e8682e73fcd563fec65e76b707546a99e..07c37862321d198696833eb2085f434b8b43c8cd 100644
--- a/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrap.java
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/PluginBootstrap.java
@@ -1,6 +1,7 @@
 package io.papermc.paper.plugin.bootstrap;
 
 import io.papermc.paper.plugin.provider.util.ProviderUtil;
+import io.papermc.paper.registry.RegistryListenerManager;
 import org.bukkit.plugin.java.JavaPlugin;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
@@ -26,6 +27,9 @@ public interface PluginBootstrap {
      */
     void bootstrap(@NotNull PluginProviderContext context);
 
+    default void registryStuff(final @NotNull RegistryListenerManager manager) {
+    }
+
     /**
      * Called by the server to instantiate your main class.
      * Plugins may override this logic to define custom creation logic for said instance, like passing addition
diff --git a/src/main/java/io/papermc/paper/registry/RegistryAccess.java b/src/main/java/io/papermc/paper/registry/RegistryAccess.java
new file mode 100644
index 0000000000000000000000000000000000000000..9446fb927b80a661ac48b0a45d22d32ba38d3447
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryAccess.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.registry;
+
+import java.util.ServiceLoader;
+import org.bukkit.Keyed;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Replacement for {@link org.bukkit.Bukkit#getRegistry(Class)}.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryAccess {
+
+    RegistryAccess INSTANCE = ServiceLoader.load(RegistryAccess.class).iterator().next();
+
+    /**
+     * Gets the registry based on the type.
+     *
+     * @param type the type
+     * @return the registry or null if none found
+     * @param <T> the type
+     * @deprecated use {@link #getRegistry(RegistryKey2)}
+     */
+    @Deprecated
+    <T extends Keyed> @Nullable Registry<T> getRegistry(@NotNull Class<T> type);
+
+    /**
+     * Gets the registry with the specified key.
+     *
+     * @param registryKey the key
+     * @return the registry
+     * @param <T> the type
+     * @throws java.util.NoSuchElementException if no registry with the key is found
+     * @throws IllegalArgumentException if the registry is not available yet
+     */
+    <T extends Keyed> @NotNull Registry<T> getRegistry(@NotNull RegistryKey2<T> registryKey);
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryBuilder.java b/src/main/java/io/papermc/paper/registry/RegistryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..da2fe22060955ae0d147bbc942a60f408be036e7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryBuilder.java
@@ -0,0 +1,15 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * To be implemented by any type used for modifying registries.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryBuilder<T extends Keyed> extends Keyed {
+
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryKey2.java b/src/main/java/io/papermc/paper/registry/RegistryKey2.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b8c35150b3282ecabc802741c7afb4a62614277
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryKey2.java
@@ -0,0 +1,60 @@
+package io.papermc.paper.registry;
+
+import com.google.common.collect.Sets;
+import io.papermc.paper.chat.ChatType;
+import java.util.Set;
+import org.bukkit.GameEvent;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.generator.structure.Structure;
+import org.bukkit.generator.structure.StructureType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+public final class RegistryKey2<T extends Keyed> { // TODO rename once the server class of the same name is removed (there's an open PR)
+
+    static final Set<RegistryKey2<?>> REGISTRY_KEYS = Sets.newIdentityHashSet();
+
+    /***********************
+     * Built-in registries *
+     ***********************/
+    public static final RegistryKey2<GameEvent> GAME_EVENT = create("game_event", GameEvent.class);
+    public static final RegistryKey2<StructureType> STRUCTURE_TYPE = create("worldgen/structure_type", StructureType.class);
+
+    /**************************
+     * Data-driven registries *
+     **************************/
+    public static final RegistryKey2<ChatType> CHAT_TYPE = create("chat_type", ChatType.class);
+    public static final RegistryKey2<Structure> STRUCTURE = create("worldgen/structure", Structure.class);
+
+    private final NamespacedKey key;
+    private final Class<T> type;
+
+    private RegistryKey2(final NamespacedKey key, final Class<T> type) {
+        this.key = key;
+        this.type = type;
+    }
+
+    public @NotNull NamespacedKey key() {
+        return this.key;
+    }
+
+    public @NotNull Class<T> type() {
+        return this.type;
+    }
+
+    @Override
+    public String toString() {
+        return "RegistryKey2{" +
+            "key=" + this.key +
+            ", type=" + this.type +
+            '}';
+    }
+
+    private static <T extends Keyed> RegistryKey2<T> create(final String key, final Class<T> type) {
+        RegistryKey2<T> registryKey = new RegistryKey2<>(NamespacedKey.minecraft(key), type);
+        REGISTRY_KEYS.add(registryKey);
+        return registryKey;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryListener.java b/src/main/java/io/papermc/paper/registry/RegistryListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..3f8f5d5287e5de10f560d715b3ac3a15c96237b1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryListener.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+public final class RegistryListener {
+
+    private RegistryListener() {
+    }
+
+    /**
+     * Called before any object is added to the registry (including ones
+     * from any {@link Freeze} listeners).
+     *
+     * @param <B> builder type
+     */
+    @ApiStatus.OverrideOnly
+    @ApiStatus.Experimental
+    @FunctionalInterface
+    public interface Modification<T extends Keyed, B extends RegistryBuilder<T>> {
+
+        void onRegister(@NotNull B builder);
+    }
+
+    /**
+     * Called after all other objects have been added to a registry (from
+     * built-in sources or datapacks depending on the registry type).
+     *
+     * @param <T> object type
+     * @param <B> builder type
+     */
+    @ApiStatus.OverrideOnly
+    @ApiStatus.Experimental
+    @FunctionalInterface
+    public interface Freeze<T extends Keyed, B extends RegistryBuilder<T>> {
+
+        void beforeFreeze(@NotNull WritableRegistry<T, B> registry);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryListenerManager.java b/src/main/java/io/papermc/paper/registry/RegistryListenerManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..e39e2c95c7a1e2107f54b88142bd5ba14a77faf8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryListenerManager.java
@@ -0,0 +1,17 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Register listeners to points in a registry's lifecycle.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryListenerManager {
+
+    <T extends Keyed, B extends RegistryBuilder<T>> void registerListener(@NotNull RegistryKey2<T> registryKey, @NotNull RegistryListener.Modification<T, B> listener);
+
+    <T extends Keyed, B extends RegistryBuilder<T>> void registerListener(@NotNull RegistryKey2<T> registryKey, @NotNull RegistryListener.Freeze<T, B> listener);
+}
diff --git a/src/main/java/io/papermc/paper/registry/WritableRegistry.java b/src/main/java/io/papermc/paper/registry/WritableRegistry.java
new file mode 100644
index 0000000000000000000000000000000000000000..3693d69950f40a678e091971d5bd37e201046e86
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/WritableRegistry.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents a registry in a modifiable state.
+ *
+ * @param <T> value type
+ * @param <B> builder type
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface WritableRegistry<T extends Keyed, B extends RegistryBuilder<T>> extends Registry<T> {
+
+    void register(@NotNull NamespacedKey key, @NotNull Consumer<? super B> value);
+
+}
diff --git a/src/main/java/org/bukkit/GameEvent.java b/src/main/java/org/bukkit/GameEvent.java
index 4808824a55628d1e2344981d40d3665d572117e0..6ecd162c6f797be124ff1ce5af16d9903283facb 100644
--- a/src/main/java/org/bukkit/GameEvent.java
+++ b/src/main/java/org/bukkit/GameEvent.java
@@ -10,7 +10,8 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a generic Mojang game event.
  */
-public final class GameEvent implements Keyed {
+@org.jetbrains.annotations.ApiStatus.NonExtendable // Paper
+public class GameEvent implements Keyed { // Paper
 
     private static final Map<NamespacedKey, GameEvent> GAME_EVENTS = new HashMap<>();
     //
@@ -93,7 +94,8 @@ public final class GameEvent implements Keyed {
     //
     private final NamespacedKey key;
 
-    private GameEvent(NamespacedKey key) {
+    @org.jetbrains.annotations.ApiStatus.Internal // Paper
+    protected GameEvent(NamespacedKey key) { // Paper
         this.key = key;
 
         GAME_EVENTS.put(key, this);
@@ -129,4 +131,13 @@ public final class GameEvent implements Keyed {
     private static GameEvent getEvent(String vanilla) {
         return new GameEvent(NamespacedKey.minecraft(vanilla));
     }
+    // Paper start
+    @org.jetbrains.annotations.ApiStatus.Experimental
+    @org.jetbrains.annotations.ApiStatus.NonExtendable
+    public interface Builder extends io.papermc.paper.registry.RegistryBuilder<GameEvent> {
+        int range();
+
+        @NotNull Builder range(int range);
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 3dc747080b7bfea4b04b5a47cc7ae4698c758802..193b220d07767423a04949b81fc31d4d63f189e9 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -3,6 +3,7 @@ package org.bukkit;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableMap;
+import io.papermc.paper.registry.RegistryKey2;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
@@ -135,14 +136,16 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Server structures.
      *
      * @see Structure
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(RegistryKey2)} with {@link RegistryKey2#STRUCTURE}.
      */
-    Registry<Structure> STRUCTURE = Bukkit.getRegistry(Structure.class);
+    @Deprecated // Paper
+    Registry<Structure> STRUCTURE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(Structure.class); // Paper
     /**
      * Server structure types.
      *
      * @see StructureType
      */
-    Registry<StructureType> STRUCTURE_TYPE = Bukkit.getRegistry(StructureType.class);
+    Registry<StructureType> STRUCTURE_TYPE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(RegistryKey2.STRUCTURE_TYPE); // Paper
     /**
      * Sound keys.
      *
@@ -197,26 +200,13 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see GameEvent
      */
-    Registry<GameEvent> GAME_EVENT = new Registry<GameEvent>() {
-
-        @NotNull
-        @Override
-        public Iterator iterator() {
-            return GameEvent.values().iterator();
-        }
-
-        @Nullable
-        @Override
-        public GameEvent get(@NotNull NamespacedKey key) {
-            return GameEvent.getByKey(key);
-        }
-    };
+    Registry<GameEvent> GAME_EVENT = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(RegistryKey2.GAME_EVENT); // Paper
     // Paper start
     /**
      * Configured structures.
      * @see io.papermc.paper.world.structure.ConfiguredStructure
      */
-    Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = Bukkit.getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class);
+    Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class); // Paper
     /**
      * Potion effect types.
      *
diff --git a/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java b/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d39e1974bf3df903d3224f639658863eaa9310e
--- /dev/null
+++ b/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.registry;
+
+import io.papermc.paper.testing.EmptyRegistry;
+import org.bukkit.Keyed;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class TestRegistryAccess implements RegistryAccess {
+
+    @Override
+    public @Nullable <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> type) {
+        return (Registry<T>) new EmptyRegistry();
+    }
+
+    @Override
+    public @NotNull <T extends Keyed> Registry<T> getRegistry(@NotNull RegistryKey2<T> registryKey) {
+        return (Registry<T>) new EmptyRegistry();
+    }
+}
diff --git a/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess b/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess
new file mode 100644
index 0000000000000000000000000000000000000000..f0a5e6d6b99aeef349fe465080ef2ff7b58617a6
--- /dev/null
+++ b/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess
@@ -0,0 +1 @@
+io.papermc.paper.registry.TestRegistryAccess

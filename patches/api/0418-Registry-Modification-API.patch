From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sat, 25 Feb 2023 13:45:44 -0800
Subject: [PATCH] Registry Modification API


diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
index adbfa20e69b093af125f1aef7d138d9cb0fbeb3a..15dfdc10b5c8759112692602fe51970d2829d2b1 100644
--- a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
@@ -1,9 +1,18 @@
 package io.papermc.paper.plugin.bootstrap;
 
+import io.papermc.paper.registry.RegistryManager;
 import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
 
 @ApiStatus.Experimental
 @ApiStatus.NonExtendable
 public interface BootstrapContext extends PluginProviderContext {
 
+    /**
+     * Provides the plugin's registry manager for
+     * handling registry events.
+     *
+     * @return the registry manager
+     */
+    @NotNull RegistryManager getRegistryManager();
 }
diff --git a/src/main/java/io/papermc/paper/registry/RegistryAccess.java b/src/main/java/io/papermc/paper/registry/RegistryAccess.java
new file mode 100644
index 0000000000000000000000000000000000000000..9446fb927b80a661ac48b0a45d22d32ba38d3447
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryAccess.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.registry;
+
+import java.util.ServiceLoader;
+import org.bukkit.Keyed;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Replacement for {@link org.bukkit.Bukkit#getRegistry(Class)}.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryAccess {
+
+    RegistryAccess INSTANCE = ServiceLoader.load(RegistryAccess.class).iterator().next();
+
+    /**
+     * Gets the registry based on the type.
+     *
+     * @param type the type
+     * @return the registry or null if none found
+     * @param <T> the type
+     * @deprecated use {@link #getRegistry(RegistryKey2)}
+     */
+    @Deprecated
+    <T extends Keyed> @Nullable Registry<T> getRegistry(@NotNull Class<T> type);
+
+    /**
+     * Gets the registry with the specified key.
+     *
+     * @param registryKey the key
+     * @return the registry
+     * @param <T> the type
+     * @throws java.util.NoSuchElementException if no registry with the key is found
+     * @throws IllegalArgumentException if the registry is not available yet
+     */
+    <T extends Keyed> @NotNull Registry<T> getRegistry(@NotNull RegistryKey2<T> registryKey);
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryBuilder.java b/src/main/java/io/papermc/paper/registry/RegistryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..14e901c6731f1a2f9b36127d9d0f1c7c3c61e185
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryBuilder.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by any type used for modifying registries.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryBuilder<T extends net.kyori.adventure.key.Keyed> extends Keyed {
+
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryKey2.java b/src/main/java/io/papermc/paper/registry/RegistryKey2.java
new file mode 100644
index 0000000000000000000000000000000000000000..8a0c0b27189436035004d8df2b24b6c5c747e20d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryKey2.java
@@ -0,0 +1,54 @@
+package io.papermc.paper.registry;
+
+import com.google.common.collect.Sets;
+import java.util.Set;
+import net.kyori.adventure.key.Keyed;
+import org.bukkit.GameEvent;
+import org.bukkit.NamespacedKey;
+import org.bukkit.generator.structure.Structure;
+import org.bukkit.generator.structure.StructureType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+public final class RegistryKey2<T extends Keyed> { // TODO rename once the server class of the same name is removed (there's an open PR)
+
+    static final Set<RegistryKey2<?>> REGISTRY_KEYS = Sets.newIdentityHashSet();
+
+    /***********************
+     * Built-in registries *
+     ***********************/
+    public static final RegistryKey2<StructureType> STRUCTURE_TYPE = create("worldgen/structure_type", StructureType.class);
+
+    /**************************
+     * Data-driven registries *
+     **************************/
+    public static final RegistryKey2<Structure> STRUCTURE = create("worldgen/structure", Structure.class);
+
+    private final NamespacedKey key;
+    private final Class<T> type;
+
+    private RegistryKey2(final NamespacedKey key, final Class<T> type) {
+        this.key = key;
+        this.type = type;
+    }
+
+    public @NotNull NamespacedKey key() {
+        return this.key;
+    }
+
+    public @NotNull Class<T> type() {
+        return this.type;
+    }
+
+    @Override
+    public String toString() {
+        return "RegistryKey[" + this.key + " / " + this.type.getSimpleName() + "]";
+    }
+
+    private static <T extends Keyed> RegistryKey2<T> create(final String key, final Class<T> type) {
+        final RegistryKey2<T> registryKey = new RegistryKey2<>(NamespacedKey.minecraft(key), type);
+        REGISTRY_KEYS.add(registryKey);
+        return registryKey;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryManager.java b/src/main/java/io/papermc/paper/registry/RegistryManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..3fb68a42ffc8cb2ddbacb73298d0270ee49b8153
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryManager.java
@@ -0,0 +1,19 @@
+package io.papermc.paper.registry;
+
+import io.papermc.paper.registry.event.listener.RegistryAdditionListener;
+import io.papermc.paper.registry.event.listener.RegistryPreFreezeListener;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Register listeners to points in a registry's lifecycle.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryManager {
+
+    <T extends Keyed, B extends RegistryBuilder<T>> void registerAdditionListener(@NotNull RegistryKey2<T> registryKey, @NotNull RegistryAdditionListener<T, B> listener);
+
+    <T extends Keyed, B extends RegistryBuilder<T>> void registerPreFreezeListener(@NotNull RegistryKey2<T> registryKey, @NotNull RegistryPreFreezeListener<T, B> listener);
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryView.java b/src/main/java/io/papermc/paper/registry/RegistryView.java
new file mode 100644
index 0000000000000000000000000000000000000000..33939811b0773d8aa85db72ab09990058401a6f7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryView.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.registry;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryView<T extends Keyed> extends Iterable<T> {
+
+    @Nullable T get(final @NotNull Key key);
+
+    @NotNull T getOrThrow(final @NotNull Key key);
+
+    @Contract("_, !null -> !null")
+    @Nullable T getOrDefault(final @NotNull Key key, @Nullable T def);
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/MutableRegistryView.java b/src/main/java/io/papermc/paper/registry/event/MutableRegistryView.java
new file mode 100644
index 0000000000000000000000000000000000000000..04438900562f38c022c664ecd4245c18437d6a67
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/MutableRegistryView.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.RegistryView;
+import java.util.function.Consumer;
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface MutableRegistryView<T extends Keyed, B extends RegistryBuilder<T>> extends RegistryView<T> {
+
+    void register(@NotNull Key key, @NotNull Consumer<? super B> value);
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/RegistryAdditionEvent.java b/src/main/java/io/papermc/paper/registry/event/RegistryAdditionEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e60dc63e3dd1aaa9a37def0d80f48ce934ec8ba7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/RegistryAdditionEvent.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryAdditionEvent<T extends Keyed, B extends RegistryBuilder<T>> extends RegistryEvent<T, B> {
+
+    @NotNull B builder();
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/RegistryEvent.java b/src/main/java/io/papermc/paper/registry/event/RegistryEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf7accaa9091babc0eeb583becf3c05b67df98be
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/RegistryEvent.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.RegistryKey2;
+import io.papermc.paper.registry.RegistryView;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryEvent<T extends Keyed, B extends RegistryBuilder<T>> {
+
+    @NotNull RegistryKey2<T> registryKey();
+
+    @NotNull RegistryView<T> registryView();
+
+    default @NotNull String eventName() {
+        return this.getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/RegistryPreFreezeEvent.java b/src/main/java/io/papermc/paper/registry/event/RegistryPreFreezeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..4dc92f57d7b5438fc9e4a0767a2d734418bb1ba5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/RegistryPreFreezeEvent.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryPreFreezeEvent<T extends Keyed, B extends RegistryBuilder<T>> extends RegistryEvent<T, B> {
+
+    @Override
+    @NotNull MutableRegistryView<T, B> registryView();
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/listener/RegistryAdditionListener.java b/src/main/java/io/papermc/paper/registry/event/listener/RegistryAdditionListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..d309df3c27724d3c25094d043d77a61057ab48be
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/listener/RegistryAdditionListener.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.registry.event.listener;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.event.RegistryAdditionEvent;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called before any object is added to the registry (including ones
+ * from any {@link RegistryPreFreezeListener} listeners).
+ *
+ * @param <B> builder type
+ */
+@ApiStatus.OverrideOnly
+@ApiStatus.Experimental
+@FunctionalInterface
+public interface RegistryAdditionListener<T extends Keyed, B extends RegistryBuilder<T>> {
+
+    void beforeRegister(@NotNull RegistryAdditionEvent<T, B> event);
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/listener/RegistryPreFreezeListener.java b/src/main/java/io/papermc/paper/registry/event/listener/RegistryPreFreezeListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..cbefe6d5eb18e9f554c85160b234a9890f836351
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/listener/RegistryPreFreezeListener.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.registry.event.listener;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.event.RegistryPreFreezeEvent;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called after all other objects have been added to a registry (from
+ * built-in sources or datapacks depending on the registry type).
+ *
+ * @param <T> object type
+ * @param <B> builder type
+ */
+@ApiStatus.OverrideOnly
+@ApiStatus.Experimental
+@FunctionalInterface
+public interface RegistryPreFreezeListener<T extends Keyed, B extends RegistryBuilder<T>> {
+
+    void beforeFreeze(@NotNull RegistryPreFreezeEvent<T, B> event);
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index ac9b690fcccb60b587e5345f12f1383afd0a73a1..b6de417e494ba0ec7928864a8083c2b365633cab 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2266,8 +2266,11 @@ public final class Bukkit {
      * @param tClass of the registry to get
      * @param <T> type of the registry
      * @return the corresponding registry or null if not present
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey2)} with
+     * keys from {@link io.papermc.paper.registry.RegistryKey2}.
      */
     @Nullable
+    @Deprecated // Paper
     public static <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> tClass) {
         return server.getRegistry(tClass);
     }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 3dc747080b7bfea4b04b5a47cc7ae4698c758802..10b0655254af8e7e7d79ebce4a146fe6468d27be 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -135,14 +135,16 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Server structures.
      *
      * @see Structure
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey2)} with {@link io.papermc.paper.registry.RegistryKey2#STRUCTURE}.
      */
-    Registry<Structure> STRUCTURE = Bukkit.getRegistry(Structure.class);
+    @Deprecated // Paper
+    Registry<Structure> STRUCTURE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(Structure.class); // Paper
     /**
      * Server structure types.
      *
      * @see StructureType
      */
-    Registry<StructureType> STRUCTURE_TYPE = Bukkit.getRegistry(StructureType.class);
+    Registry<StructureType> STRUCTURE_TYPE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(io.papermc.paper.registry.RegistryKey2.STRUCTURE_TYPE); // Paper
     /**
      * Sound keys.
      *
@@ -216,7 +218,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Configured structures.
      * @see io.papermc.paper.world.structure.ConfiguredStructure
      */
-    Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = Bukkit.getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class);
+    Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class); // Paper
     /**
      * Potion effect types.
      *
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 2204336d8800311b65e894739ab1b27273e7c6f2..f688305748c7dbb810ad41e5e93a4a421b411beb 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1931,8 +1931,11 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param tClass of the registry to get
      * @param <T> type of the registry
      * @return the corresponding registry or null if not present
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey2)} with
+     * keys from {@link io.papermc.paper.registry.RegistryKey2}.
      */
     @Nullable
+    @Deprecated // Paper
     <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> tClass);
 
     /**
diff --git a/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java b/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d39e1974bf3df903d3224f639658863eaa9310e
--- /dev/null
+++ b/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.registry;
+
+import io.papermc.paper.testing.EmptyRegistry;
+import org.bukkit.Keyed;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class TestRegistryAccess implements RegistryAccess {
+
+    @Override
+    public @Nullable <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> type) {
+        return (Registry<T>) new EmptyRegistry();
+    }
+
+    @Override
+    public @NotNull <T extends Keyed> Registry<T> getRegistry(@NotNull RegistryKey2<T> registryKey) {
+        return (Registry<T>) new EmptyRegistry();
+    }
+}
diff --git a/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess b/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess
new file mode 100644
index 0000000000000000000000000000000000000000..f0a5e6d6b99aeef349fe465080ef2ff7b58617a6
--- /dev/null
+++ b/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess
@@ -0,0 +1 @@
+io.papermc.paper.registry.TestRegistryAccess

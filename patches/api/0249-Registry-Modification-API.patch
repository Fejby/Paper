From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Wed, 2 Mar 2022 13:36:21 -0800
Subject: [PATCH] Registry Modification API


diff --git a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
index adbfa20e69b093af125f1aef7d138d9cb0fbeb3a..15dfdc10b5c8759112692602fe51970d2829d2b1 100644
--- a/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
+++ b/src/main/java/io/papermc/paper/plugin/bootstrap/BootstrapContext.java
@@ -1,9 +1,18 @@
 package io.papermc.paper.plugin.bootstrap;
 
+import io.papermc.paper.registry.RegistryManager;
 import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
 
 @ApiStatus.Experimental
 @ApiStatus.NonExtendable
 public interface BootstrapContext extends PluginProviderContext {
 
+    /**
+     * Provides the plugin's registry manager for
+     * handling registry events.
+     *
+     * @return the registry manager
+     */
+    @NotNull RegistryManager getRegistryManager();
 }
diff --git a/src/main/java/io/papermc/paper/registry/Reference.java b/src/main/java/io/papermc/paper/registry/Reference.java
new file mode 100644
index 0000000000000000000000000000000000000000..6b93ca09c46ed9f37ee8acd89526ff8dbea7bd61
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/Reference.java
@@ -0,0 +1,63 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Represents a reference to a server-backed registry value that may
+ * change or not exist. These are mainly useful for {@link io.papermc.paper.plugin.bootstrap.PluginBootstrap}s
+ * to have access to the vanilla keys of types without requiring the value to exist yet.
+ *
+ * @param <T> type of the value
+ */
+public interface Reference<T extends Keyed> extends Keyed {
+
+    /**
+     * Gets the value from the registry with the key.
+     *
+     * @return the value
+     * @throws java.util.NoSuchElementException if there is no value with this key
+     */
+    @NotNull T value();
+
+    /**
+     * Gets the value from the registry with the key.
+     *
+     * @return the value or null if it doesn't exist
+     */
+    @Nullable T valueOrNull();
+
+    /**
+     * Gets if the value exists at the key in the registry.
+     *
+     * @return true if the value exists
+     */
+    boolean exists();
+
+    /**
+     * Creates a reference to a registered value.
+     *
+     * @param registry the registry the value is located in
+     * @param key the key to the value
+     * @param <T> the type of the value
+     * @return a reference
+     */
+    static <T extends Keyed> @NotNull Reference<T> create(@NotNull Registry<T> registry, @NotNull NamespacedKey key) {
+        return new ReferenceImpl<>(registry, key);
+    }
+
+    /**
+     * Creates a reference to a registered value.
+     *
+     * @param registryKey the registry key for the registry
+     * @param key the key to the value
+     * @param <T> the type of the value
+     * @return a reference
+     */
+    static <T extends Keyed> @NotNull Reference<T> create(@NotNull RegistryKey<T> registryKey, @NotNull NamespacedKey key) {
+        return new ReferenceImpl<>(registryKey, key);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/ReferenceImpl.java b/src/main/java/io/papermc/paper/registry/ReferenceImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf804db2f2f0d1d8a03ae9a4ef34c3bc81e3c3a9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/ReferenceImpl.java
@@ -0,0 +1,46 @@
+package io.papermc.paper.registry;
+
+import com.google.common.base.Suppliers;
+import java.util.function.Supplier;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.NoSuchElementException;
+
+record ReferenceImpl<T extends Keyed>(@NotNull Supplier<Registry<T>> registry, @NotNull NamespacedKey key) implements Reference<T> {
+
+    ReferenceImpl(@NotNull Registry<T> registry, @NotNull NamespacedKey key) {
+        this(() -> registry, key);
+    }
+
+    ReferenceImpl(@NotNull RegistryKey<T> registryKey, @NotNull NamespacedKey key) {
+        this(Suppliers.memoize(() -> RegistryAccess.INSTANCE.getRegistry(registryKey)), key);
+    }
+
+    @Override
+    public @NotNull T value() {
+        final @Nullable T value = this.registry.get().get(this.key);
+        if (value == null) {
+            throw new NoSuchElementException("No such value with key " + this.key);
+        }
+        return value;
+    }
+
+    @Override
+    public @Nullable T valueOrNull() {
+        return this.registry.get().get(this.key);
+    }
+
+    @Override
+    public boolean exists() {
+        return this.registry.get().get(this.key) != null; // TODO replace with Registry#containsKey() when that's added
+    }
+
+    @Override
+    public @NotNull NamespacedKey getKey() {
+        return this.key;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryAccess.java b/src/main/java/io/papermc/paper/registry/RegistryAccess.java
new file mode 100644
index 0000000000000000000000000000000000000000..224d200adbec9c5fb888aad5182e70e90b00d3d6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryAccess.java
@@ -0,0 +1,40 @@
+package io.papermc.paper.registry;
+
+import java.util.ServiceLoader;
+import org.bukkit.Keyed;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Replacement for {@link org.bukkit.Bukkit#getRegistry(Class)}.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryAccess {
+
+    RegistryAccess INSTANCE = ServiceLoader.load(RegistryAccess.class).iterator().next();
+
+    /**
+     * Gets the registry based on the type.
+     *
+     * @param type the type
+     * @return the registry or null if none found
+     * @param <T> the type
+     * @deprecated use {@link #getRegistry(RegistryKey)}
+     */
+    @Deprecated
+    <T extends Keyed> @Nullable Registry<T> getRegistry(@NotNull Class<T> type);
+
+    /**
+     * Gets the registry with the specified key.
+     *
+     * @param registryKey the key
+     * @return the registry
+     * @param <T> the type
+     * @throws java.util.NoSuchElementException if no registry with the key is found
+     * @throws IllegalArgumentException if the registry is not available yet
+     */
+    <T extends Keyed> @NotNull Registry<T> getRegistry(@NotNull RegistryKey<T> registryKey);
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryBuilder.java b/src/main/java/io/papermc/paper/registry/RegistryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..14e901c6731f1a2f9b36127d9d0f1c7c3c61e185
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryBuilder.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.registry;
+
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+
+/**
+ * To be implemented by any type used for modifying registries.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryBuilder<T extends net.kyori.adventure.key.Keyed> extends Keyed {
+
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryKey.java b/src/main/java/io/papermc/paper/registry/RegistryKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..d476c90f589985a88487635c7622d2aa60e6c42c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryKey.java
@@ -0,0 +1,54 @@
+package io.papermc.paper.registry;
+
+import com.google.common.collect.Sets;
+import java.util.Set;
+import net.kyori.adventure.key.Keyed;
+import org.bukkit.GameEvent;
+import org.bukkit.NamespacedKey;
+import org.bukkit.generator.structure.Structure;
+import org.bukkit.generator.structure.StructureType;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+public final class RegistryKey<T extends Keyed> {
+
+    static final Set<RegistryKey<?>> REGISTRY_KEYS = Sets.newIdentityHashSet();
+
+    /* ******************* *
+     * Built-in registries *
+     * ******************* */
+    public static final RegistryKey<StructureType> STRUCTURE_TYPE = create("worldgen/structure_type", StructureType.class);
+
+    /* ********************** *
+     * Data-driven registries *
+     * ********************** */
+    public static final RegistryKey<Structure> STRUCTURE = create("worldgen/structure", Structure.class);
+
+    private final NamespacedKey key;
+    private final Class<T> type;
+
+    private RegistryKey(final NamespacedKey key, final Class<T> type) {
+        this.key = key;
+        this.type = type;
+    }
+
+    public @NotNull NamespacedKey key() {
+        return this.key;
+    }
+
+    public @NotNull Class<T> type() {
+        return this.type;
+    }
+
+    @Override
+    public String toString() {
+        return "RegistryKey[" + this.key + " / " + this.type.getSimpleName() + "]";
+    }
+
+    static <T extends Keyed> RegistryKey<T> create(final String key, final Class<T> type) {
+        final RegistryKey<T> registryKey = new RegistryKey<>(NamespacedKey.minecraft(key), type);
+        REGISTRY_KEYS.add(registryKey);
+        return registryKey;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryManager.java b/src/main/java/io/papermc/paper/registry/RegistryManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..ef761ff08bd0e7037548145bea26e7df5e777a7e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryManager.java
@@ -0,0 +1,19 @@
+package io.papermc.paper.registry;
+
+import io.papermc.paper.registry.event.listener.RegistryAdditionListener;
+import io.papermc.paper.registry.event.listener.RegistryPreFreezeListener;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Register listeners to points in a registry's lifecycle.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface RegistryManager {
+
+    <T extends Keyed, B extends RegistryBuilder<T>> void registerAdditionListener(@NotNull RegistryKey<T> registryKey, @NotNull RegistryAdditionListener<T, B> listener);
+
+    <T extends Keyed, B extends RegistryBuilder<T>> void registerPreFreezeListener(@NotNull RegistryKey<T> registryKey, @NotNull RegistryPreFreezeListener<T, B> listener);
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryView.java b/src/main/java/io/papermc/paper/registry/RegistryView.java
new file mode 100644
index 0000000000000000000000000000000000000000..33939811b0773d8aa85db72ab09990058401a6f7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/RegistryView.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.registry;
+
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryView<T extends Keyed> extends Iterable<T> {
+
+    @Nullable T get(final @NotNull Key key);
+
+    @NotNull T getOrThrow(final @NotNull Key key);
+
+    @Contract("_, !null -> !null")
+    @Nullable T getOrDefault(final @NotNull Key key, @Nullable T def);
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/RegistryAdditionEvent.java b/src/main/java/io/papermc/paper/registry/event/RegistryAdditionEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e60dc63e3dd1aaa9a37def0d80f48ce934ec8ba7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/RegistryAdditionEvent.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryAdditionEvent<T extends Keyed, B extends RegistryBuilder<T>> extends RegistryEvent<T, B> {
+
+    @NotNull B builder();
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/RegistryEvent.java b/src/main/java/io/papermc/paper/registry/event/RegistryEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..596a1f180cdf52039ca71a6af8972f25cd9ee108
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/RegistryEvent.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.RegistryKey;
+import io.papermc.paper.registry.RegistryView;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryEvent<T extends Keyed, B extends RegistryBuilder<T>> {
+
+    @NotNull RegistryKey<T> registryKey();
+
+    @NotNull RegistryView<T> registryView();
+
+    default @NotNull String eventName() {
+        return this.getClass().getSimpleName();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/RegistryPreFreezeEvent.java b/src/main/java/io/papermc/paper/registry/event/RegistryPreFreezeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4aab3ca10e76c4687fc65cee5fb8324da1af791
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/RegistryPreFreezeEvent.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.Experimental
+@ApiStatus.NonExtendable
+public interface RegistryPreFreezeEvent<T extends Keyed, B extends RegistryBuilder<T>> extends RegistryEvent<T, B> {
+
+    @Override
+    @NotNull WritableRegistryView<T, B> registryView();
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/WritableRegistryView.java b/src/main/java/io/papermc/paper/registry/event/WritableRegistryView.java
new file mode 100644
index 0000000000000000000000000000000000000000..7167e9be938ff781c30aa1b6178138473279be94
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/WritableRegistryView.java
@@ -0,0 +1,16 @@
+package io.papermc.paper.registry.event;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.RegistryView;
+import java.util.function.Consumer;
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.key.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface WritableRegistryView<T extends Keyed, B extends RegistryBuilder<T>> extends RegistryView<T> {
+
+    void register(@NotNull Key key, @NotNull Consumer<? super B> value);
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/listener/RegistryAdditionListener.java b/src/main/java/io/papermc/paper/registry/event/listener/RegistryAdditionListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..d309df3c27724d3c25094d043d77a61057ab48be
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/listener/RegistryAdditionListener.java
@@ -0,0 +1,21 @@
+package io.papermc.paper.registry.event.listener;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.event.RegistryAdditionEvent;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called before any object is added to the registry (including ones
+ * from any {@link RegistryPreFreezeListener} listeners).
+ *
+ * @param <B> builder type
+ */
+@ApiStatus.OverrideOnly
+@ApiStatus.Experimental
+@FunctionalInterface
+public interface RegistryAdditionListener<T extends Keyed, B extends RegistryBuilder<T>> {
+
+    void beforeRegister(@NotNull RegistryAdditionEvent<T, B> event);
+}
diff --git a/src/main/java/io/papermc/paper/registry/event/listener/RegistryPreFreezeListener.java b/src/main/java/io/papermc/paper/registry/event/listener/RegistryPreFreezeListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..cbefe6d5eb18e9f554c85160b234a9890f836351
--- /dev/null
+++ b/src/main/java/io/papermc/paper/registry/event/listener/RegistryPreFreezeListener.java
@@ -0,0 +1,22 @@
+package io.papermc.paper.registry.event.listener;
+
+import io.papermc.paper.registry.RegistryBuilder;
+import io.papermc.paper.registry.event.RegistryPreFreezeEvent;
+import org.bukkit.Keyed;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called after all other objects have been added to a registry (from
+ * built-in sources or datapacks depending on the registry type).
+ *
+ * @param <T> object type
+ * @param <B> builder type
+ */
+@ApiStatus.OverrideOnly
+@ApiStatus.Experimental
+@FunctionalInterface
+public interface RegistryPreFreezeListener<T extends Keyed, B extends RegistryBuilder<T>> {
+
+    void beforeFreeze(@NotNull RegistryPreFreezeEvent<T, B> event);
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index ceb8d207843df5ddc852d44928286648a652eedb..607575264bfff93cfba6ee9fb771dfef3ffd7c18 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2202,8 +2202,11 @@ public final class Bukkit {
      * @param tClass of the registry to get
      * @param <T> type of the registry
      * @return the corresponding registry or null if not present
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} with
+     * keys from {@link io.papermc.paper.registry.RegistryKey}.
      */
     @Nullable
+    @Deprecated // Paper
     public static <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> tClass) {
         return server.getRegistry(tClass);
     }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index ff1fcdaccbca81602278a0b52670f7b895ba22b7..e78f57104211ce5faec75d2be0ec478809b25670 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -135,14 +135,16 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Server structures.
      *
      * @see Structure
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} with {@link io.papermc.paper.registry.RegistryKey#STRUCTURE}.
      */
-    Registry<Structure> STRUCTURE = Bukkit.getRegistry(Structure.class);
+    @Deprecated // Paper
+    Registry<Structure> STRUCTURE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(Structure.class); // Paper
     /**
      * Server structure types.
      *
      * @see StructureType
      */
-    Registry<StructureType> STRUCTURE_TYPE = Bukkit.getRegistry(StructureType.class);
+    Registry<StructureType> STRUCTURE_TYPE = io.papermc.paper.registry.RegistryAccess.INSTANCE.getRegistry(io.papermc.paper.registry.RegistryKey.STRUCTURE_TYPE); // Paper
     /**
      * Sound keys.
      *
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 02b898d441c42771903d5839c3cde544b1a25778..206b2d14b16d29ce96ed0383a1e67288add2041c 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1871,8 +1871,11 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param tClass of the registry to get
      * @param <T> type of the registry
      * @return the corresponding registry or null if not present
+     * @deprecated use {@link io.papermc.paper.registry.RegistryAccess#getRegistry(io.papermc.paper.registry.RegistryKey)} with
+     * keys from {@link io.papermc.paper.registry.RegistryKey}.
      */
     @Nullable
+    @Deprecated // Paper
     <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> tClass);
 
     /**
diff --git a/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java b/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java
new file mode 100644
index 0000000000000000000000000000000000000000..11174aa8703753d6a4eb95d849ed37280ced56e5
--- /dev/null
+++ b/src/test/java/io/papermc/paper/registry/TestRegistryAccess.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.registry;
+
+import io.papermc.paper.testing.EmptyRegistry;
+import org.bukkit.Keyed;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class TestRegistryAccess implements RegistryAccess {
+
+    @Override
+    public @Nullable <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> type) {
+        return (Registry<T>) new EmptyRegistry();
+    }
+
+    @Override
+    public @NotNull <T extends Keyed> Registry<T> getRegistry(@NotNull RegistryKey<T> registryKey) {
+        return (Registry<T>) new EmptyRegistry();
+    }
+}
diff --git a/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess b/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess
new file mode 100644
index 0000000000000000000000000000000000000000..f0a5e6d6b99aeef349fe465080ef2ff7b58617a6
--- /dev/null
+++ b/src/test/resources/META-INF/services/io.papermc.paper.registry.RegistryAccess
@@ -0,0 +1 @@
+io.papermc.paper.registry.TestRegistryAccess
